// Code generated by mockery v1.0.0. DO NOT EDIT.

package consensus

import mock "github.com/stretchr/testify/mock"
import types "github.com/lianxiangcloud/linkchain/types"

// MockBlockChainApp is an autogenerated mock type for the BlockChainApp type
type MockBlockChainApp struct {
	mock.Mock
}

// CheckBlock provides a mock function with given fields: block
func (_m *MockBlockChainApp) CheckBlock(block *types.Block) bool {
	ret := _m.Called(block)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*types.Block) bool); ok {
		r0 = rf(block)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CommitBlock provides a mock function with given fields: block, blockParts, seenCommit, fastsync
func (_m *MockBlockChainApp) CommitBlock(block *types.Block, blockParts *types.PartSet, seenCommit *types.Commit, fastsync bool) ([]*types.Validator, error) {
	ret := _m.Called(block, blockParts, seenCommit, fastsync)

	var r0 []*types.Validator
	if rf, ok := ret.Get(0).(func(*types.Block, *types.PartSet, *types.Commit, bool) []*types.Validator); ok {
		r0 = rf(block, blockParts, seenCommit, fastsync)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Validator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*types.Block, *types.PartSet, *types.Commit, bool) error); ok {
		r1 = rf(block, blockParts, seenCommit, fastsync)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBlock provides a mock function with given fields: height, maxTxs, gasLimit, timeUinx
func (_m *MockBlockChainApp) CreateBlock(height uint64, maxTxs int, gasLimit uint64, timeUinx uint64) *types.Block {
	ret := _m.Called(height, maxTxs, gasLimit, timeUinx)

	var r0 *types.Block
	if rf, ok := ret.Get(0).(func(uint64, int, uint64, uint64) *types.Block); ok {
		r0 = rf(height, maxTxs, gasLimit, timeUinx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	return r0
}

// GetRecoverValidators provides a mock function with given fields: height
func (_m *MockBlockChainApp) GetRecoverValidators(height uint64) []*types.Validator {
	ret := _m.Called(height)

	var r0 []*types.Validator
	if rf, ok := ret.Get(0).(func(uint64) []*types.Validator); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Validator)
		}
	}

	return r0
}

// GetValidators provides a mock function with given fields: height
func (_m *MockBlockChainApp) GetValidators(height uint64) []*types.Validator {
	ret := _m.Called(height)

	var r0 []*types.Validator
	if rf, ok := ret.Get(0).(func(uint64) []*types.Validator); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Validator)
		}
	}

	return r0
}

// Height provides a mock function with given fields:
func (_m *MockBlockChainApp) Height() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// LoadBlock provides a mock function with given fields: height
func (_m *MockBlockChainApp) LoadBlock(height uint64) *types.Block {
	ret := _m.Called(height)

	var r0 *types.Block
	if rf, ok := ret.Get(0).(func(uint64) *types.Block); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	return r0
}

// LoadBlockCommit provides a mock function with given fields: height
func (_m *MockBlockChainApp) LoadBlockCommit(height uint64) *types.Commit {
	ret := _m.Called(height)

	var r0 *types.Commit
	if rf, ok := ret.Get(0).(func(uint64) *types.Commit); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Commit)
		}
	}

	return r0
}

// LoadBlockMeta provides a mock function with given fields: height
func (_m *MockBlockChainApp) LoadBlockMeta(height uint64) *types.BlockMeta {
	ret := _m.Called(height)

	var r0 *types.BlockMeta
	if rf, ok := ret.Get(0).(func(uint64) *types.BlockMeta); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BlockMeta)
		}
	}

	return r0
}

// LoadBlockPart provides a mock function with given fields: height, index
func (_m *MockBlockChainApp) LoadBlockPart(height uint64, index int) *types.Part {
	ret := _m.Called(height, index)

	var r0 *types.Part
	if rf, ok := ret.Get(0).(func(uint64, int) *types.Part); ok {
		r0 = rf(height, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Part)
		}
	}

	return r0
}

// LoadSeenCommit provides a mock function with given fields: height
func (_m *MockBlockChainApp) LoadSeenCommit(height uint64) *types.Commit {
	ret := _m.Called(height)

	var r0 *types.Commit
	if rf, ok := ret.Get(0).(func(uint64) *types.Commit); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Commit)
		}
	}

	return r0
}

// PreRunBlock provides a mock function with given fields: block
func (_m *MockBlockChainApp) PreRunBlock(block *types.Block) {
	_m.Called(block)
}

// SetLastChangedVals provides a mock function with given fields: height, vals
func (_m *MockBlockChainApp) SetLastChangedVals(height uint64, vals []*types.Validator) {
	_m.Called(height, vals)
}

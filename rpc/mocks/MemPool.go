// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import lk_crypto_libstypes "github.com/lianxiangcloud/linkchain/libs/cryptonote/types"
import mock "github.com/stretchr/testify/mock"

import types "github.com/lianxiangcloud/linkchain/types"

// MemPool is an autogenerated mock type for the MemPool type
type MemPool struct {
	mock.Mock
}

// AddTx provides a mock function with given fields: tx
func (_m *MemPool) AddTx(tx types.Tx) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields:
func (_m *MemPool) Flush() {
	_m.Called()
}

// GoodTxsSize provides a mock function with given fields:
func (_m *MemPool) GoodTxsSize() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// KeyImageExists provides a mock function with given fields: key
func (_m *MemPool) KeyImageExists(key lk_crypto_libstypes.Key) bool {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(lk_crypto_libstypes.Key) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PendingTxs provides a mock function with given fields: nums
func (_m *MemPool) PendingTxs(nums int) (types.Txs, error) {
	ret := _m.Called(nums)

	var r0 types.Txs
	if rf, ok := ret.Get(0).(func(int) types.Txs); ok {
		r0 = rf(nums)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Txs)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(nums)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import common "github.com/lianxiangcloud/linkchain/libs/common"
import mock "github.com/stretchr/testify/mock"

import types "github.com/lianxiangcloud/linkchain/types"

// BlockStore is an autogenerated mock type for the BlockStore type
type BlockStore struct {
	mock.Mock
}

// GetTx provides a mock function with given fields: hash
func (_m *BlockStore) GetTx(hash common.Hash) (types.Tx, *types.TxEntry) {
	ret := _m.Called(hash)

	var r0 types.Tx
	if rf, ok := ret.Get(0).(func(common.Hash) types.Tx); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Tx)
		}
	}

	var r1 *types.TxEntry
	if rf, ok := ret.Get(1).(func(common.Hash) *types.TxEntry); ok {
		r1 = rf(hash)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.TxEntry)
		}
	}

	return r0, r1
}

// Height provides a mock function with given fields:
func (_m *BlockStore) Height() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// LoadBlock provides a mock function with given fields: height
func (_m *BlockStore) LoadBlock(height uint64) *types.Block {
	ret := _m.Called(height)

	var r0 *types.Block
	if rf, ok := ret.Get(0).(func(uint64) *types.Block); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	return r0
}

// LoadBlockByHash provides a mock function with given fields: hash
func (_m *BlockStore) LoadBlockByHash(hash common.Hash) *types.Block {
	ret := _m.Called(hash)

	var r0 *types.Block
	if rf, ok := ret.Get(0).(func(common.Hash) *types.Block); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	return r0
}

// LoadBlockMeta provides a mock function with given fields: height
func (_m *BlockStore) LoadBlockMeta(height uint64) *types.BlockMeta {
	ret := _m.Called(height)

	var r0 *types.BlockMeta
	if rf, ok := ret.Get(0).(func(uint64) *types.BlockMeta); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BlockMeta)
		}
	}

	return r0
}

// LoadBlockMetaByHash provides a mock function with given fields: hash
func (_m *BlockStore) LoadBlockMetaByHash(hash common.Hash) *types.BlockMeta {
	ret := _m.Called(hash)

	var r0 *types.BlockMeta
	if rf, ok := ret.Get(0).(func(common.Hash) *types.BlockMeta); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BlockMeta)
		}
	}

	return r0
}

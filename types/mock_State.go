// Code generated by mockery v1.0.0. DO NOT EDIT.

package types

import big "math/big"
import common "github.com/lianxiangcloud/linkchain/libs/common"
import mock "github.com/stretchr/testify/mock"

// MockState is an autogenerated mock type for the State type
type MockState struct {
	mock.Mock
}

// Exist provides a mock function with given fields: addr
func (_m *MockState) Exist(addr common.Address) bool {
	ret := _m.Called(addr)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetBalance provides a mock function with given fields: addr
func (_m *MockState) GetBalance(addr common.Address) *big.Int {
	ret := _m.Called(addr)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(common.Address) *big.Int); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// GetNonce provides a mock function with given fields: addr
func (_m *MockState) GetNonce(addr common.Address) uint64 {
	ret := _m.Called(addr)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// GetTokenBalance provides a mock function with given fields: addr, token
func (_m *MockState) GetTokenBalance(addr common.Address, token common.Address) *big.Int {
	ret := _m.Called(addr, token)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(common.Address, common.Address) *big.Int); ok {
		r0 = rf(addr, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// IsContract provides a mock function with given fields: addr
func (_m *MockState) IsContract(addr common.Address) bool {
	ret := _m.Called(addr)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetNonce provides a mock function with given fields: addr, nonce
func (_m *MockState) SetNonce(addr common.Address, nonce uint64) {
	_m.Called(addr, nonce)
}

// SubBalance provides a mock function with given fields: addr, amount
func (_m *MockState) SubBalance(addr common.Address, amount *big.Int) {
	_m.Called(addr, amount)
}

// SubTokenBalance provides a mock function with given fields: addr, token, amount
func (_m *MockState) SubTokenBalance(addr common.Address, token common.Address, amount *big.Int) {
	_m.Called(addr, token, amount)
}
